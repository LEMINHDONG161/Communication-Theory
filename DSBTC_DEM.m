% ---------------------------------------------------------% DSBTC_DEM.m% Matlab program example for DSB-TC AM demodulation % The message signal is%        m(t) =  1  for 0 < t < 0.05%        m(t) = -2  for 0.05 < t < 0.1%        m(t) =  0  otherwise% ---------------------------------------------------------clearecho ondf=0.25;             % desired frequency resolution [Hz]ts=1/1000;        % sampling interval [sec]fs=1/ts;           % sampling frequencyfc=250;            % carrier frequencyT1=0; T2=0.15;    % observation time interval (from T1 to T2 sec)t=[T1:ts:T2];    % observation time vectorN=length(t);a=0.85;            % Modulation index% -----------------------------------------------% modulation : DSB-SC% -----------------------------------------------% message signal mm=[ones(1,T2/(3*ts)),-2*ones(1,T2/(3*ts)),zeros(1,T2/(3*ts)+1)];s_c=cos(2*pi*fc.*t);                 % carrier signalm_max=max(abs(m));m_n=m/m_max;             % normalized message signal[M,m,df1]=fft_mod(m,ts,df);        % Fourier transform M=M/fs;                              	% scalingf=[0:df1:df1*(length(m)-1)]-fs/2;    	% frequency vector% modulated signals_m=(1+a*m_n).*s_c;     [S_m,s_m,df1]=fft_mod(s_m,ts,df);      % Fourier transform S_m=S_m/fs;                              	% scaling% -----------------------------------------------------------------% noncoherent demodulation : envelope detection% We use Hilbert transform to find the envelope of the bandpass signal% The Hilbert transform function in Matlab, denoted by hilbert.m,% generates the analytic signal z(t).% The real part of z(t) is the original sequence, and its imaginary part% is the Hilbert transform of the original sequence.% -----------------------------------------------------------------z=hilbert(s_m);                       % get analytic signal envelope=abs(z);                   % find the envelope dem1=m_max*(envelope-1)/a; % remove dc and rescale[Z,z,df1]=fft_mod(z,ts,df);          % Fourier transform of analytic signalZ=Z/fs;                                 % scalingclfsubplot(2,1,1)plot(t,m(1:length(t)))axis([T1 T2 -2.1 2.1])xlabel('Time')title('Message signal waveform')pause  % Press any key to see a plot of the modulated signalsubplot(2,1,2)plot(t,s_m(1:length(t)))axis([T1 T2 -2.1 2.1])xlabel('Time')title('Modulated signal waveform')pause  % Press a key to see the envelope of the modulated signalclfsubplot(2,1,1)plot(t,s_m(1:length(t)))axis([T1 T2 -2.1 2.1])xlabel('Time')title('Modulated signal')subplot(2,1,2)plot(t,envelope(1:length(t)))xlabel('Time')title('Envelope of the modulated signal')pause   % Press any key to see the spectra subplot(2,1,1)plot(f,abs(fftshift(S_m)))%xlabel('Frequency')title('Spectrum of the modulated signal')subplot(2,1,2)plot(f,abs(fftshift(Z)))title('Spectrum of the analytic signal')xlabel('Frequency')pause  % Press a key to compare the message and the demodulated signalclfsubplot(2,1,1)plot(t,m(1:length(t)))axis([T1 T2 -2.1 2.1])xlabel('Time')title('Message signal')subplot(2,1,2)plot(t,dem1(1:length(t)))xlabel('Time')title('Demodulated signal')pause  % Press a key to compare in the presence of noise % ----------------------------------------------% AWGN noise channel% ----------------------------------------------signal_power=norm(s_m(1:N))^2/N;	% power in modulated signalnoise_power=signal_power/100;        	% noise powernoise_std=sqrt(noise_power);         	% noise standard deviationnoise=noise_std*randn(1,length(s_m));  	% generate noiser=s_m+noise;                           	% add noise to the modulated signal[R,r,df1]=fft_mod(r,ts,df);           	% Fourier transform z=hilbert(s_m);                   % get analytic signal envelope=abs(z);               % find the envelope dem2=m_max*(envelope-1)/a;     % remove dc and rescaleclfsubplot(2,1,1)plot(t,m(1:length(t)))axis([T1 T2 -2.1 2.1])xlabel('Time')title('Message signal')subplot(2,1,2)plot(t,dem2(1:length(t)))xlabel('Time')title('Demodulated signal in the presence of noise')